
========== vgd ============

========== 起自永以外关键字 ============

@name 超限舞装
@function vgd.OverDress(c, filter*)
@param c Card 要注册超限舞装功能的卡
@param filter N 符合 指定卡号 或者 指定条件 的后防者
@return Effect 这个效果
为卡片 c 注册一个超限舞装功能
不填 filter 则不检查 hc
filter 为卡号时，检查 hc 卡号是 filter
filter 為函數時，參數為卡片 hc，卡片 c，應該返回 boolean 值，类似以下
function filter(hc, c)
    return true
end

@name 交织超限舞装
@function vgd.XOverDress(c, filter*)
@param c Card 要注册交织超限舞装功能的卡
@param filter N 符合 指定卡号 或者 指定条件 的后防者
@return Effect 这个效果
为卡片 c 注册一个交织超限舞装功能
不填 filter 则不检查 hc
filter 为卡号时，检查 hc 卡号是 filter
filter 為函數時，參數為卡片 hc，卡片 c，應該返回 boolean 值，类似以下
function filter(hc, c)
    return true
end

@name 舞装加身
@function vgd.DressUp(c, code)
@param c Card 要注册舞装加身功能的卡
@param code number 指定卡的卡号
@return Effect 这个效果
为卡片 c 注册一个舞装加身功能

========== 指令卡相关 ============

@name 普通指令卡的发动
@function vgd.SpellActivate(c, m*, op*, cost*, con*)
@param c C 拥有这个效果的卡
@param m=c原本卡号 N 储存提示脚本的卡号
@param op F 这个效果的处理函数
@param cost F 这个效果的费用函数
@param con F 这个效果的条件函数
@return Effect 这个效果
为卡片 c 注册一个普通指令卡的发动

@name 闪现指令卡的发动
@function vgd.QuickSpell(c, op*, cost*, con*, tg*)
@param c C 拥有这个效果的卡
@param op F 这个效果的处理函数
@param cost F 这个效果的费用函数
@param con F 这个效果的条件函数
@param tg F 这个效果的检查函数
@return Effect 这个效果
为卡片 c 注册一个闪现指令卡的发动

@name 设置指令卡的发动
@function vgd.ContinuousSpell(c, cost*, con*, tg*)
@param c C 拥有这个效果的卡
@param cost F 这个效果的费用函数
@param con F 这个效果的条件函数
@param tg F 这个效果的检查函数
@return Effect 这个效果
为卡片 c 注册一个设置指令卡的发动

========== 【自】相关 ============

@name 【自】
@function vgd.EffectTypeTrigger(c, m*, loc*, type*, code, op*, cost*, con*, tg*, count*, property*, id*)
@param c C 拥有这个效果的卡
@param m=c原本卡号 N 储存提示脚本的卡号
@param loc=【V/R】 N 可以发动的区域
@param type=自己 N (自己/全域)状态变化时触发
@param code N 这个效果触发的时点
@param op F 这个效果的处理函数
@param cost F 这个效果的费用函数
@param con F 这个效果的条件函数
@param tg F 这个效果的检查函数
@param count N 同一回合内最多发动的次数
@param property N 这个效果的特殊属性
@param id=1 N 提示脚本的卡号索引
@return Effect 这个效果
为卡片 c 注册一个【自】能力
当单位在 loc 时，code 时点被触发时执行的效果

@name 【自】攻击击中时
@function vgd.EffectTypeTriggerWhenHitting(c, m*, loc*, type*, op*, cost*, con*, tg*, count*, player*, property*, id*)
@param c C 拥有这个效果的卡
@param m=c原本卡号 N 储存提示脚本的卡号
@param loc=【V/R】 N 可以发动的区域
@param type=自己 N (自己/全域)攻击击中时触发
@param op F 这个效果的处理函数
@param cost F 这个效果的费用函数
@param con F 这个效果的条件函数
@param tg F 这个效果的检查函数
@param count N 同一回合内最多发动的次数
@param player=c的控制者 N 被击中的卡的控制者
@param property N 这个效果的特殊属性
@param id=1 N 提示脚本的卡号索引
@return Effect, Effect 两个效果
为卡片 c 注册一个【自】能力
(自己/全域)攻击击中时触发

@name 【自】放置到G时
@function vgd.CardToG(c, m*, op*, cost*, con*)
@param c C 拥有这个效果的卡
@param m=c原本卡号 N 储存提示脚本的卡号
@param op F 这个效果的处理函数
@param cost F 这个效果的费用函数
@param con F 这个效果的条件函数
@return Effect 这个效果
为卡片 c 注册一个【自】能力
(自己/自己以外)放置到G时触发

@name 【自】被 ride 时
@function vgd.BeRidedByCard(c, m*, filter*, op*, cost*, con*, tg*, id*)
@param c C 拥有这个效果的卡
@param m=c原本卡号 N 储存提示脚本的卡号
@param filter N|F ride c 的卡的 指定卡号 或者 指定条件
@param op F 这个效果的处理函数
@param cost F 这个效果的费用函数
@param con F 这个效果的条件函数
@param tg F 这个效果的检查函数
@param id=2 N 提示脚本的卡号索引
@return Effect 这个效果
为卡片 c 注册一个【自】能力
卡片 c 被 卡片 rc ride 时触发
不填 filter 则不检查 rc
filter 为卡号时，检查 rc 卡号是 filter
filter 为函数时，参数为卡片 rc，卡片 c，应该返回 boolean 值，类似以下
function filter(rc, c)
    return true
end

========== 起相关 ============

@name 【起】
@function vgd.EffectTypeIgnition(c, m*, loc*, op*, cost*, con*, tg*, count*, property*, id*)
@param c C 拥有这个效果的卡
@param m=c原本卡号 N 储存提示脚本的卡号
@param loc=【V/R】 N 可以发动的区域
@param op F 这个效果的处理函数
@param cost F 这个效果的费用函数
@param con F 这个效果的条件函数
@param tg F 这个效果的检查函数
@param count N 同一回合内最多发动的次数
@param property N 这个效果的特殊属性
@param id=1 N 提示脚本的卡号索引
@return Effect 这个效果
为卡片 c 注册一个在 loc 时，可以发动的【起】能力

========== 永相关 ============

@name 【永】数值变更
@function vgd.EffectTypeContinuous(c, m*, loc*, type*, code, val, con*, tg*, loc_self*, loc_op*, reset*, hc*)
@param c C 创建这个效果的卡
@param m=c原本卡号 N 效果的创建者的卡号
@param loc=【V/R】 N 生效的区域
@param type=只影响自己 N 这个效果的影响范围(自己/全域)
@param code N 触发的效果
@param val N|F 这个效果的变化数值，应为 数字 或 返回数字的函数
@param con F 这个效果的条件函数
@param tg F 这个效果的影响目标(全域)
@param loc_self N 这个效果影响的自己区域，影响全域范围才需填
@param loc_op N 这个效果影响的对方区域，影响全域范围才需填
@param reset N 这个效果的重置条件
@param hc=c C 拥有这个效果的卡
@return Effect 这个效果
为卡片 c 注册一个 code 的【永】能力
val 为函数时，参数为效果 e，卡片 tc，应该返回 number 值，类似以下
function val(e, tc)
    --e 这个效果
    --tc 被影响的卡片
    return 1
end

@name 【永】力量数值变更
@function vgd.EffectTypeContinuousChangeAttack(c, m*, loc*, type*, val, con*, tg*, loc_self*, loc_op*, reset*, hc*)
@param c C 创建这个效果的卡
@param m=c原本卡号 N 效果的创建者的卡号
@param loc=【V/R】 N 可以发动的区域
@param type=只影响自己 N 这个效果的影响范围(自己/全域)
@param val N|F 这个效果的变化数值，应为 数字 或 返回数字的函数
@param con F 这个效果的条件函数
@param tg F 这个效果的影响目标(全域)
@param loc_self N 这个效果影响的自己区域，影响全域范围才需填
@param loc_op N 这个效果影响的对方区域，影响全域范围才需填
@param reset N 这个效果的重置条件
@param hc=c C 拥有这个效果的卡
@return Effect 这个效果
为卡片 c 注册一个力量数值变更的【永】能力
val 为函数时，参数为效果 e，卡片 tc，应该返回 number 值，类似以下
function val(e, tc)
    --e 这个效果
    --tc 被影响的卡片
    return 1
end

@name 【永】盾护数值变更
@function vgd.EffectTypeContinuousChangeDefense(c, m*, type*, val, con*, tg*, loc_self*, loc_op*, reset*, hc*)
@param c C 创建这个效果的卡
@param m=c原本卡号 N 效果的创建者的卡号
@param type=只影响自己 N 这个效果的影响范围(自己/全域)
@param val N|F 这个效果的变化数值，应为 数字 或 返回数字的函数
@param con F 这个效果的条件函数
@param tg F 这个效果的影响目标(全域)
@param loc_self N 这个效果影响的自己区域，影响全域范围才需填
@param loc_op N 这个效果影响的对方区域，影响全域范围才需填
@param reset N 这个效果的重置条件
@param hc=c C 拥有这个效果的卡
@return Effect 这个效果
为卡片 c 注册一个盾护数值变更的【永】能力
val 为函数时，参数为效果 e，卡片 tc，应该返回 number 值，类似以下
function val(e, tc)
    --e 这个效果
    --tc 被影响的卡片
    return 1
end

@name 【永】暴击数值变更
@function vgd.EffectTypeContinuousChangeStar(c, m*, type*, val, con*, tg*, loc_self*, loc_op*, reset*, hc*)
@param c C 创建这个效果的卡
@param m=c原本卡号 N 效果的创建者的卡号
@param type=只影响自己 N 这个效果的影响范围(自己/全域)
@param val N|F 这个效果的变化数值，应为 数字 或 返回数字的函数
@param con F 这个效果的条件函数
@param tg F 这个效果的影响目标(全域)
@param loc_self N 这个效果影响的自己区域，影响全域范围才需填
@param loc_op N 这个效果影响的对方区域，影响全域范围才需填
@param reset N 这个效果的重置条件
@param hc=c C 拥有这个效果的卡
@return Effect, Effect 两个效果
为卡片 c 注册一个暴击数值变更的【永】能力
val 为函数时，参数为效果 e，卡片 tc，应该返回 number 值，类似以下
function val(e, tc)
    --e 这个效果
    --tc 被影响的卡片
    return 1
end

@name 【永】驱动数值变更
@function vgd.TriggerCountUp(c, m*, num, con*, reset*, hc*)
@param c C 创建这个效果的卡
@param m=c原本卡号 N 效果的创建者的卡号
@param num N 这个效果的变化数值，应为 数字
@param con F 这个效果的条件函数
@param reset N 这个效果的重置条件
@param hc=c C 拥有这个效果的卡
@return Effect 这个效果
为卡片 c 注册一个驱动数值变更的【永】能力

@name 【永】不会被效果选择
@function vgd.CannotBeTarget(c, m*, loc*, type*, val*, con*, tg*, loc_self*)
@param c C 创建这个效果的卡
@param m=c原本卡号 N 效果的创建者的卡号
@param loc=【V/R】 N 生效的区域
@param type=只影响自己 N 这个效果的影响范围(自己/全域)
@param val=对手的卡片的效果 F 返回 boolean 的函数
@param con F 这个效果的条件函数
@param tg F 这个效果的影响目标，影响全域范围才需填
@param loc_self=【V/R】 N 这个效果影响的自己区域，影响全域范围才需填
@return Effect 这个效果
为卡片 c 注册一个不会被效果选择的【永】能力
*如果存在 tg 或者 loc_self，type会被自动设置成影响全域
val 的参数为效果 e，效果 re，数字 rp，应该返回 boolean 值
以下为默认函数
function val(e, re, rp)
    --e 这个效果
    --re 来源效果
    --rp 来源玩家
    return rp == 1 - e:GetHandlerPlayer()
end

@name 【永】【指令区】黑夜与深渊黑夜
@function vgd.NightEffect(c, m*)
@param c Card 要注册黑夜的卡
@param m=c原本卡号 N 效果的创建者的卡号
@return Effect, Effect 两个效果
为卡片 c 注册以下功能：
【永】【指令区】：你的指令区中没有世界卡以外的设置指令卡的话，根据你的指令区中的卡的张数生效以下全部的效果。
●1张——你的世界卡的内容变为黑夜。
●2张以上——你的世界卡的内容变为深渊黑夜。

@name 【永】【指令区】银河中央监狱
@function vgd.CallInPrison(c, m*)
@param c Card 要注册监狱的卡
@param m=c原本卡号 N 效果的创建者的卡号
@return Effect, Effect 两个效果
为卡片 c 注册以下功能：
【永】【指令区】：对手在可以将后防者通常CALL出场的时段，对手可以将以下的效果执行。
●灵魂爆发1。这样做了的话，选择被收容的他自己的1张卡，CALL到他自己的R上。
●计数爆发1。这样做了的话，选择被收容的他自己的2张卡，CALL到他自己的R上。

========== 其他 ============

@name 全局检查计数器
@function vgd.GlobalCheckEffect(c, m*, code, con*, op*)
@param c C 创建这个计数器的卡
@param m=c原本卡号 N 创建这个计数器的卡的卡号
@param code N 这个计数器触发的时点
@param con F 这个计数器的条件函数
@param op F 这个计数器的处理函数
创建一个全局的检查计数器，code 时点被触发时
有 con 时需额外满足 con 条件
会给 rp 增加一个回合结束时重置的 m 的计数器
有 op 时则会将以上效果替换成 op 的处理